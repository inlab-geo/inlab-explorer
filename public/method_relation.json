{
  "name": "CoFI",
  "link_git": "https://github.com/inlab-geo/cofi",
  "link_doc": "https://cofi.readthedocs.io",
  "description": "Common Framework for Inference",
  "examples": [
    {
      "name": "Linear Regression - linear_regression_bayesbay.py",
      "description": "Script demonstrating BayesBay for Trans-D Bayesian sampling of curve misfit for a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_bayesbay.py"
    },
    {
      "name": "Analysis of Eustatic Sea-level heights using partition modelling - Partition_modelling_sealevel_bayesbay.ipynb",
      "description": "Fitting a partition model to Eustatic Sea-level heights using trans-D Bayesian partition modelling",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/partition_modelling/Partition_modelling_sealevel_bayesbay.ipynb"
    },
    {
      "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
      "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
    },
    {
      "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
      "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
    },
    {
      "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
      "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
    },
    {
      "name": "FMM Tomography - fmm_tomography.ipynb",
      "description": "Uses a simple matrix solver to perform regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography.ipynb"
    },
    {
      "name": "FMM Tomography - fmm_tomography_regularization_discussion.ipynb",
      "description": "Uses a simple matrix solver to perform smoothing, flattening and damping regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_regularization_discussion.ipynb"
    },
    {
      "name": "FMM Tomography - fmm_tomography_simple_newton.py",
      "description": "Uses simple Newton matrix solver to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_simple_newton.py"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_rect_gauss_newton.py",
      "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_gauss_newton.py"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_tri_gauss_newton.py",
      "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_gauss_newton.py"
    },
    {
      "name": "Linear Regression - linear_regression_optimizer_lstsq.py",
      "description": "Script demonstrating scipy misfit optimisation based solver for a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_lstsq.py"
    },
    {
      "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
      "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
    },
    {
      "name": "Linear Regression - linear_regression.ipynb",
      "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
    },
    {
      "name": "Linear Regression - linear_regression_sealevel.ipynb",
      "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
    },
    {
      "name": "Linear Regression - linear_regression_linear_system_solver.py",
      "description": "Script demonstrating (local) matrix based solver for a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_solver.py"
    },
    {
      "name": "Linear Regression - linear_regression_linear_system_general.py",
      "description": "Script demonstrating scipy Least Squares matrix based solver for a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_general.py"
    },
    {
      "name": "Xray Tomography - xray_tomography.ipynb",
      "description": "Solves overdetermined linear system with Least Squares using scipy for 2D Xray tomography problem in Cartesian co-ordinates.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography.ipynb"
    },
    {
      "name": "Xray Tomography - xray_tomography_linear_solver.py",
      "description": "Script for solving overdetermined linear system for 2D Xray tomography problem in Cartesian co-ordinates.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography_linear_solver.py"
    },
    {
      "name": "Linear Regression - linear_regression_pytorch_optim.py",
      "description": "Script demonstrating pytorch misfit minimisation of a curve for a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_pytorch_optim.py"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_tri_torch_optim.py",
      "description": "Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_torch_optim.py"
    },
    {
      "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
      "description": "DCIP inversion for a synthetic test problem",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
    },
    {
      "name": "Modified Himmelblau function - modified_himmelblau.ipynb",
      "description": "Finding the global minimum of a modified Himmelblau function",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/test_functions_for_optimization/modified_himmelblau.ipynb"
    },
    {
      "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
      "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
    },
    {
      "name": "Linear Regression - linear_regression_optimizer_minimize.py",
      "description": "Script demonstrating scipy least squares based solver for a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_minimize.py"
    },
    {
      "name": "FMM Tomography - fmm_tomography_gaussian_prior_scipy_opt.py",
      "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a spatial Gaussian prior regularisation in a Cartesian 2D travel time tomography problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_gaussian_prior_scipy_opt.py"
    },
    {
      "name": "FMM Tomography - fmm_tomography_reg_scipy_optimiser.py",
      "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_reg_scipy_optimiser.py"
    },
    {
      "name": "PyGIMLi DCIP - pygimli_dcip_century_tri_mesh.ipynb",
      "description": "DCIP inversion for the Century Deposit",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip_century_tri_mesh.ipynb"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert.ipynb",
      "description": "Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert.ipynb"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_rect_scipy_min.py",
      "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_scipy_min.py"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_tri_scipy_min.py",
      "description": "Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_scipy_min.py"
    },
    {
      "name": "Linear Regression - linear_regression_emcee_sampler.py",
      "description": "Script demonstrating Bayesian sampling with emcee in a simple polynomial regression problem.",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_emcee_sampler.py"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_toy_emcee_parallel.py",
      "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee_parallel.py"
    },
    {
      "name": "PyGIMLi ERT - pygimli_ert_toy_emcee.py",
      "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee.py"
    }
  ],
  "tutorials": [
    {
      "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
      "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
    },
    {
      "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
      "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
    },
    {
      "name": "FMM Tomography - travel_time_tomography.ipynb",
      "description": "Seismic wave tomography via fast marching method",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
    },
    {
      "name": "Linear Regression - linear_regression.ipynb",
      "description": "Linear regression problem solved by linear solver, optimizer and sampler",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
    },
    {
      "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
      "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
    }
  ],
  "children": [
    {
      "name": "Ensemble methods",
      "link_git": null,
      "link_doc": null,
      "description": "Ensemble methods are a class of inference technique that result in multiple models, rather than a single model through parameter estimation, these might be driven by data fitting or Bayesian sampling.",
      "examples": [
        {
          "name": "Linear Regression - linear_regression_bayesbay.py",
          "description": "Script demonstrating BayesBay for Trans-D Bayesian sampling of curve misfit for a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_bayesbay.py"
        },
        {
          "name": "Analysis of Eustatic Sea-level heights using partition modelling - Partition_modelling_sealevel_bayesbay.ipynb",
          "description": "Fitting a partition model to Eustatic Sea-level heights using trans-D Bayesian partition modelling",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/partition_modelling/Partition_modelling_sealevel_bayesbay.ipynb"
        },
        {
          "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
          "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
        },
        {
          "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
          "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
        },
        {
          "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
          "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
        },
        {
          "name": "Modified Himmelblau function - modified_himmelblau.ipynb",
          "description": "Finding the global minimum of a modified Himmelblau function",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/test_functions_for_optimization/modified_himmelblau.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression.ipynb",
          "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression_sealevel.ipynb",
          "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression_emcee_sampler.py",
          "description": "Script demonstrating Bayesian sampling with emcee in a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_emcee_sampler.py"
        },
        {
          "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
          "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
        },
        {
          "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
          "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_toy_emcee_parallel.py",
          "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee_parallel.py"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_toy_emcee.py",
          "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee.py"
        }
      ],
      "tutorials": [
        {
          "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
          "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression.ipynb",
          "description": "Linear regression problem solved by linear solver, optimizer and sampler",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
        },
        {
          "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
          "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
        },
        {
          "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
          "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
        }
      ],
      "children": [
        {
          "name": "Bayesian sampling",
          "link_git": null,
          "link_doc": null,
          "description": "Bayesian sampling is a technique for drawing samples (models) that follow a probability distribution of unknown parameters based on observed data and prior beliefs.",
          "examples": [
            {
              "name": "Linear Regression - linear_regression_bayesbay.py",
              "description": "Script demonstrating BayesBay for Trans-D Bayesian sampling of curve misfit for a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_bayesbay.py"
            },
            {
              "name": "Analysis of Eustatic Sea-level heights using partition modelling - Partition_modelling_sealevel_bayesbay.ipynb",
              "description": "Fitting a partition model to Eustatic Sea-level heights using trans-D Bayesian partition modelling",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/partition_modelling/Partition_modelling_sealevel_bayesbay.ipynb"
            },
            {
              "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
              "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
            },
            {
              "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
              "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
            },
            {
              "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
              "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression.ipynb",
              "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression_sealevel.ipynb",
              "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression_emcee_sampler.py",
              "description": "Script demonstrating Bayesian sampling with emcee in a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_emcee_sampler.py"
            },
            {
              "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
              "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
            },
            {
              "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
              "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_toy_emcee_parallel.py",
              "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee_parallel.py"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_toy_emcee.py",
              "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee.py"
            }
          ],
          "tutorials": [
            {
              "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
              "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression.ipynb",
              "description": "Linear regression problem solved by linear solver, optimizer and sampler",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
            },
            {
              "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
              "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
            },
            {
              "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
              "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
            }
          ],
          "children": [
            {
              "name": "Trans-D McMC",
              "link_git": null,
              "link_doc": null,
              "description": "Trans-Dimensional Markov chain Monte Carlo (Trans-D McMC) is a specialized form of McMC that allows for model selection by transitioning between different dimensional spaces.",
              "examples": [
                {
                  "name": "Linear Regression - linear_regression_bayesbay.py",
                  "description": "Script demonstrating BayesBay for Trans-D Bayesian sampling of curve misfit for a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_bayesbay.py"
                },
                {
                  "name": "Analysis of Eustatic Sea-level heights using partition modelling - Partition_modelling_sealevel_bayesbay.ipynb",
                  "description": "Fitting a partition model to Eustatic Sea-level heights using trans-D Bayesian partition modelling",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/partition_modelling/Partition_modelling_sealevel_bayesbay.ipynb"
                },
                {
                  "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
                  "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
                },
                {
                  "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                  "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                },
                {
                  "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                  "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                }
              ],
              "tutorials": [
                {
                  "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                  "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                }
              ],
              "children": [
                {
                  "name": "bayesbay",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Linear Regression - linear_regression_bayesbay.py",
                      "description": "Script demonstrating BayesBay for Trans-D Bayesian sampling of curve misfit for a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_bayesbay.py"
                    },
                    {
                      "name": "Analysis of Eustatic Sea-level heights using partition modelling - Partition_modelling_sealevel_bayesbay.ipynb",
                      "description": "Fitting a partition model to Eustatic Sea-level heights using trans-D Bayesian partition modelling",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/partition_modelling/Partition_modelling_sealevel_bayesbay.ipynb"
                    },
                    {
                      "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
                      "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                      "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                      "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                    }
                  ],
                  "tutorials": [
                    {
                      "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                      "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "VanillaSampler",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_bayes_bay.py",
                      "link_doc": "https://bayes-bay.readthedocs.io/en/latest/api/generated/bayesbay.samplers.VanillaSampler.html\n",
                      "description": "Sampling the posterior by means of reversible-jump Markov chain Monte Carlo.",
                      "examples": [
                        {
                          "name": "Linear Regression - linear_regression_bayesbay.py",
                          "description": "Script demonstrating BayesBay for Trans-D Bayesian sampling of curve misfit for a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_bayesbay.py"
                        },
                        {
                          "name": "Analysis of Eustatic Sea-level heights using partition modelling - Partition_modelling_sealevel_bayesbay.ipynb",
                          "description": "Fitting a partition model to Eustatic Sea-level heights using trans-D Bayesian partition modelling",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/partition_modelling/Partition_modelling_sealevel_bayesbay.ipynb"
                        },
                        {
                          "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
                          "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
                        },
                        {
                          "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                          "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                        },
                        {
                          "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                          "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                          "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "ParallelTempering",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_bayes_bay.py",
                      "link_doc": "https://bayes-bay.readthedocs.io/en/latest/api/generated/bayesbay.samplers.ParallelTempering.html\n",
                      "description": "Sampling the posterior by means of reversible-jump Markov chain Monte Carlo accelerated with parallel tempering.",
                      "children": []
                    },
                    {
                      "name": "SimulatedAnnealing",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_bayes_bay.py",
                      "link_doc": "https://bayes-bay.readthedocs.io/en/latest/api/generated/bayesbay.samplers.SimulatedAnnealing.html\n",
                      "description": "Sampling the posterior by means of reversible-jump Markov chain Monte Carlo accelerated with simulated annealing.",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "McMC samplers",
              "link_git": null,
              "link_doc": null,
              "description": "Markov chain Monte Carlo (McMC) samplers are algorithms for generating samples from complex probability distributions, often used in Bayesian inference.",
              "examples": [
                {
                  "name": "Linear Regression - linear_regression.ipynb",
                  "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression_sealevel.ipynb",
                  "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression_emcee_sampler.py",
                  "description": "Script demonstrating Bayesian sampling with emcee in a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_emcee_sampler.py"
                },
                {
                  "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
                  "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
                },
                {
                  "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
                  "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
                },
                {
                  "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                  "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                },
                {
                  "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                  "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_toy_emcee_parallel.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee_parallel.py"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_toy_emcee.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee.py"
                }
              ],
              "tutorials": [
                {
                  "name": "Linear Regression - linear_regression.ipynb",
                  "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                },
                {
                  "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                  "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                },
                {
                  "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
                  "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
                },
                {
                  "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                  "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                }
              ],
              "children": [
                {
                  "name": "emcee",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Linear Regression - linear_regression.ipynb",
                      "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                    },
                    {
                      "name": "Linear Regression - linear_regression_sealevel.ipynb",
                      "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
                    },
                    {
                      "name": "Linear Regression - linear_regression_emcee_sampler.py",
                      "description": "Script demonstrating Bayesian sampling with emcee in a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_emcee_sampler.py"
                    },
                    {
                      "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
                      "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
                    },
                    {
                      "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
                      "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                      "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                      "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_toy_emcee_parallel.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee_parallel.py"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_toy_emcee.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee.py"
                    }
                  ],
                  "tutorials": [
                    {
                      "name": "Linear Regression - linear_regression.ipynb",
                      "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                    },
                    {
                      "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                      "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                    },
                    {
                      "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
                      "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                      "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "MHMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.MHMove\n",
                      "description": "A general Metropolis-Hastings proposal.",
                      "children": []
                    },
                    {
                      "name": "GaussianMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.GaussianMove\n",
                      "description": "A Metropolis step with a Gaussian proposal function.",
                      "children": []
                    },
                    {
                      "name": "RedBlueMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.RedBlueMove\n",
                      "description": "An abstract red-blue ensemble move with parallelization as described in Foreman-Mackey et al. (2013).",
                      "children": []
                    },
                    {
                      "name": "StretchMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.StretchMove\n",
                      "description": "A Goodman & Weare (2010) \u201cstretch move\u201d with parallelization as described in Foreman-Mackey et al. (2013).",
                      "examples": [
                        {
                          "name": "Linear Regression - linear_regression.ipynb",
                          "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                        },
                        {
                          "name": "Linear Regression - linear_regression_sealevel.ipynb",
                          "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
                        },
                        {
                          "name": "Linear Regression - linear_regression_emcee_sampler.py",
                          "description": "Script demonstrating Bayesian sampling with emcee in a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_emcee_sampler.py"
                        },
                        {
                          "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
                          "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
                        },
                        {
                          "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
                          "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
                        },
                        {
                          "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                          "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                        },
                        {
                          "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                          "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_toy_emcee_parallel.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee_parallel.py"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_toy_emcee.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_toy_emcee.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "Linear Regression - linear_regression.ipynb",
                          "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                        },
                        {
                          "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                          "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                        },
                        {
                          "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
                          "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
                        },
                        {
                          "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                          "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "WalkMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.WalkMove\n",
                      "description": "A Goodman & Weare (2010) \u201cwalk move\u201d with parallelization as described in Foreman-Mackey et al. (2013).",
                      "children": []
                    },
                    {
                      "name": "KDEMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.KDEMove\n",
                      "description": "A proposal using a KDE of the complementary ensemble.",
                      "children": []
                    },
                    {
                      "name": "DEMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.DEMove\n",
                      "description": "A proposal using differential evolution.",
                      "children": []
                    },
                    {
                      "name": "DESnookerMove",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_emcee.py",
                      "link_doc": "https://emcee.readthedocs.io/en/stable/user/moves/#emcee.moves.DESnookerMove\n",
                      "description": "A snooker proposal using differential evolution.",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Direct search",
          "link_git": null,
          "link_doc": null,
          "description": "In the context of ensemble methods, direct search involves a search of the parameter space, e.g. to reduce a data misfit function, without requiring gradient information, These typically make use of exploration of the space and exploitation of previous sampling to guide search.",
          "examples": [
            {
              "name": "Modified Himmelblau function - modified_himmelblau.ipynb",
              "description": "Finding the global minimum of a modified Himmelblau function",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/test_functions_for_optimization/modified_himmelblau.ipynb"
            }
          ],
          "children": [
            {
              "name": "Monte Carlo",
              "link_git": null,
              "link_doc": null,
              "description": "Monte Carlo methods use random sampling to obtain numerical results for problems that might be deterministic in principle.",
              "examples": [
                {
                  "name": "Modified Himmelblau function - modified_himmelblau.ipynb",
                  "description": "Finding the global minimum of a modified Himmelblau function",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/test_functions_for_optimization/modified_himmelblau.ipynb"
                }
              ],
              "children": [
                {
                  "name": "Neighpy",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "children": [
                    {
                      "name": "Neighbourhood Algorithm",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_neighpy.py",
                      "link_doc": "https://neighpy.readthedocs.io/en/latest/\n",
                      "description": "Wrapper for the tool Neighpy, implementing the Neighbourhood Algorithm",
                      "children": []
                    }
                  ]
                },
                {
                  "name": "cofi.border_collie_optimization",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Modified Himmelblau function - modified_himmelblau.ipynb",
                      "description": "Finding the global minimum of a modified Himmelblau function",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/test_functions_for_optimization/modified_himmelblau.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "Border Collie Optimization Algorithm",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_cofi_border_collie_optimization.py",
                      "link_doc": "https://ieeexplore.ieee.org/document/9106341\n",
                      "description": "Implementation of a Border Collie Optimization Algorithm, based on the concepts and equations given in Dutta et al., IEEE Access, 2020.",
                      "examples": [
                        {
                          "name": "Modified Himmelblau function - modified_himmelblau.ipynb",
                          "description": "Finding the global minimum of a modified Himmelblau function",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/test_functions_for_optimization/modified_himmelblau.ipynb"
                        }
                      ],
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Parameter estimation",
      "link_git": null,
      "link_doc": null,
      "description": "Parameter estimation is the process of determining the specific numerical values that define a parametrised (mathematical) model, often using methods like Maximum Likelihood Estimation or Least Squares to best fit the observed data.",
      "examples": [
        {
          "name": "FMM Tomography - fmm_tomography.ipynb",
          "description": "Uses a simple matrix solver to perform regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography.ipynb"
        },
        {
          "name": "FMM Tomography - fmm_tomography_regularization_discussion.ipynb",
          "description": "Uses a simple matrix solver to perform smoothing, flattening and damping regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_regularization_discussion.ipynb"
        },
        {
          "name": "FMM Tomography - fmm_tomography_simple_newton.py",
          "description": "Uses simple Newton matrix solver to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_simple_newton.py"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_rect_gauss_newton.py",
          "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_gauss_newton.py"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_tri_gauss_newton.py",
          "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_gauss_newton.py"
        },
        {
          "name": "Linear Regression - linear_regression_optimizer_lstsq.py",
          "description": "Script demonstrating scipy misfit optimisation based solver for a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_lstsq.py"
        },
        {
          "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
          "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression.ipynb",
          "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression_sealevel.ipynb",
          "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression_linear_system_solver.py",
          "description": "Script demonstrating (local) matrix based solver for a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_solver.py"
        },
        {
          "name": "Linear Regression - linear_regression_linear_system_general.py",
          "description": "Script demonstrating scipy Least Squares matrix based solver for a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_general.py"
        },
        {
          "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
          "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
        },
        {
          "name": "Xray Tomography - xray_tomography.ipynb",
          "description": "Solves overdetermined linear system with Least Squares using scipy for 2D Xray tomography problem in Cartesian co-ordinates.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography.ipynb"
        },
        {
          "name": "Xray Tomography - xray_tomography_linear_solver.py",
          "description": "Script for solving overdetermined linear system for 2D Xray tomography problem in Cartesian co-ordinates.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography_linear_solver.py"
        },
        {
          "name": "Linear Regression - linear_regression_pytorch_optim.py",
          "description": "Script demonstrating pytorch misfit minimisation of a curve for a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_pytorch_optim.py"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_tri_torch_optim.py",
          "description": "Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_torch_optim.py"
        },
        {
          "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
          "description": "DCIP inversion for a synthetic test problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
        },
        {
          "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
          "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression_optimizer_minimize.py",
          "description": "Script demonstrating scipy least squares based solver for a simple polynomial regression problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_minimize.py"
        },
        {
          "name": "FMM Tomography - fmm_tomography_gaussian_prior_scipy_opt.py",
          "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a spatial Gaussian prior regularisation in a Cartesian 2D travel time tomography problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_gaussian_prior_scipy_opt.py"
        },
        {
          "name": "FMM Tomography - fmm_tomography_reg_scipy_optimiser.py",
          "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_reg_scipy_optimiser.py"
        },
        {
          "name": "PyGIMLi DCIP - pygimli_dcip_century_tri_mesh.ipynb",
          "description": "DCIP inversion for the Century Deposit",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip_century_tri_mesh.ipynb"
        },
        {
          "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
          "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
        },
        {
          "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
          "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert.ipynb",
          "description": "Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert.ipynb"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_rect_scipy_min.py",
          "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_scipy_min.py"
        },
        {
          "name": "PyGIMLi ERT - pygimli_ert_tri_scipy_min.py",
          "description": "Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_scipy_min.py"
        }
      ],
      "tutorials": [
        {
          "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
          "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
        },
        {
          "name": "FMM Tomography - travel_time_tomography.ipynb",
          "description": "Seismic wave tomography via fast marching method",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
        },
        {
          "name": "Linear Regression - linear_regression.ipynb",
          "description": "Linear regression problem solved by linear solver, optimizer and sampler",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
        },
        {
          "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
          "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
        },
        {
          "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
          "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
        }
      ],
      "children": [
        {
          "name": "Optimization",
          "link_git": null,
          "link_doc": null,
          "description": "Optimization involves finding the best solution from a set of possible solutions, usually by minimizing or maximizing a certain function.",
          "examples": [
            {
              "name": "FMM Tomography - fmm_tomography.ipynb",
              "description": "Uses a simple matrix solver to perform regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography.ipynb"
            },
            {
              "name": "FMM Tomography - fmm_tomography_regularization_discussion.ipynb",
              "description": "Uses a simple matrix solver to perform smoothing, flattening and damping regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_regularization_discussion.ipynb"
            },
            {
              "name": "FMM Tomography - fmm_tomography_simple_newton.py",
              "description": "Uses simple Newton matrix solver to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_simple_newton.py"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_rect_gauss_newton.py",
              "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_gauss_newton.py"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_tri_gauss_newton.py",
              "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_gauss_newton.py"
            },
            {
              "name": "Linear Regression - linear_regression_optimizer_lstsq.py",
              "description": "Script demonstrating scipy misfit optimisation based solver for a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_lstsq.py"
            },
            {
              "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
              "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression_pytorch_optim.py",
              "description": "Script demonstrating pytorch misfit minimisation of a curve for a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_pytorch_optim.py"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_tri_torch_optim.py",
              "description": "Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_torch_optim.py"
            },
            {
              "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
              "description": "DCIP inversion for a synthetic test problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
            },
            {
              "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
              "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression.ipynb",
              "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression_optimizer_minimize.py",
              "description": "Script demonstrating scipy least squares based solver for a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_minimize.py"
            },
            {
              "name": "FMM Tomography - fmm_tomography_gaussian_prior_scipy_opt.py",
              "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a spatial Gaussian prior regularisation in a Cartesian 2D travel time tomography problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_gaussian_prior_scipy_opt.py"
            },
            {
              "name": "FMM Tomography - fmm_tomography_reg_scipy_optimiser.py",
              "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_reg_scipy_optimiser.py"
            },
            {
              "name": "PyGIMLi DCIP - pygimli_dcip_century_tri_mesh.ipynb",
              "description": "DCIP inversion for the Century Deposit",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip_century_tri_mesh.ipynb"
            },
            {
              "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
              "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
            },
            {
              "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
              "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert.ipynb",
              "description": "Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert.ipynb"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_rect_scipy_min.py",
              "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_scipy_min.py"
            },
            {
              "name": "PyGIMLi ERT - pygimli_ert_tri_scipy_min.py",
              "description": "Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_scipy_min.py"
            }
          ],
          "tutorials": [
            {
              "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
              "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
            },
            {
              "name": "FMM Tomography - travel_time_tomography.ipynb",
              "description": "Seismic wave tomography via fast marching method",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression.ipynb",
              "description": "Linear regression problem solved by linear solver, optimizer and sampler",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
            },
            {
              "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
              "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
            },
            {
              "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
              "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
            }
          ],
          "children": [
            {
              "name": "Non linear",
              "link_git": null,
              "link_doc": null,
              "description": "Non-linear optimization focuses on finding the maximum, or minimum, of a function that is not necessarily quadratic over its parameters.",
              "examples": [
                {
                  "name": "FMM Tomography - fmm_tomography.ipynb",
                  "description": "Uses a simple matrix solver to perform regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography.ipynb"
                },
                {
                  "name": "FMM Tomography - fmm_tomography_regularization_discussion.ipynb",
                  "description": "Uses a simple matrix solver to perform smoothing, flattening and damping regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_regularization_discussion.ipynb"
                },
                {
                  "name": "FMM Tomography - fmm_tomography_simple_newton.py",
                  "description": "Uses simple Newton matrix solver to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_simple_newton.py"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_rect_gauss_newton.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_gauss_newton.py"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_tri_gauss_newton.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_gauss_newton.py"
                },
                {
                  "name": "Linear Regression - linear_regression_optimizer_lstsq.py",
                  "description": "Script demonstrating scipy misfit optimisation based solver for a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_lstsq.py"
                },
                {
                  "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
                  "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression_pytorch_optim.py",
                  "description": "Script demonstrating pytorch misfit minimisation of a curve for a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_pytorch_optim.py"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_tri_torch_optim.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_torch_optim.py"
                },
                {
                  "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
                  "description": "DCIP inversion for a synthetic test problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
                },
                {
                  "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
                  "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression.ipynb",
                  "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression_optimizer_minimize.py",
                  "description": "Script demonstrating scipy least squares based solver for a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_minimize.py"
                },
                {
                  "name": "FMM Tomography - fmm_tomography_gaussian_prior_scipy_opt.py",
                  "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a spatial Gaussian prior regularisation in a Cartesian 2D travel time tomography problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_gaussian_prior_scipy_opt.py"
                },
                {
                  "name": "FMM Tomography - fmm_tomography_reg_scipy_optimiser.py",
                  "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_reg_scipy_optimiser.py"
                },
                {
                  "name": "PyGIMLi DCIP - pygimli_dcip_century_tri_mesh.ipynb",
                  "description": "DCIP inversion for the Century Deposit",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip_century_tri_mesh.ipynb"
                },
                {
                  "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                  "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                },
                {
                  "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                  "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert.ipynb",
                  "description": "Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert.ipynb"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_rect_scipy_min.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_scipy_min.py"
                },
                {
                  "name": "PyGIMLi ERT - pygimli_ert_tri_scipy_min.py",
                  "description": "Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_scipy_min.py"
                }
              ],
              "tutorials": [
                {
                  "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                  "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                },
                {
                  "name": "FMM Tomography - travel_time_tomography.ipynb",
                  "description": "Seismic wave tomography via fast marching method",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression.ipynb",
                  "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                },
                {
                  "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
                  "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
                },
                {
                  "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                  "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                }
              ],
              "children": [
                {
                  "name": "cofi.simple_newton",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "FMM Tomography - fmm_tomography.ipynb",
                      "description": "Uses a simple matrix solver to perform regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography.ipynb"
                    },
                    {
                      "name": "FMM Tomography - fmm_tomography_regularization_discussion.ipynb",
                      "description": "Uses a simple matrix solver to perform smoothing, flattening and damping regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_regularization_discussion.ipynb"
                    },
                    {
                      "name": "FMM Tomography - fmm_tomography_simple_newton.py",
                      "description": "Uses simple Newton matrix solver to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_simple_newton.py"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_rect_gauss_newton.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_gauss_newton.py"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_tri_gauss_newton.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_gauss_newton.py"
                    }
                  ],
                  "tutorials": [
                    {
                      "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                      "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                    },
                    {
                      "name": "FMM Tomography - travel_time_tomography.ipynb",
                      "description": "Seismic wave tomography via fast marching method",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "Newton's method in optimization",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_cofi_simple_newton.py",
                      "link_doc": "https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization\n",
                      "description": "CoFI's own implementation of the Newton's method in optimization with stopping criteria.",
                      "examples": [
                        {
                          "name": "FMM Tomography - fmm_tomography.ipynb",
                          "description": "Uses a simple matrix solver to perform regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography.ipynb"
                        },
                        {
                          "name": "FMM Tomography - fmm_tomography_regularization_discussion.ipynb",
                          "description": "Uses a simple matrix solver to perform smoothing, flattening and damping regularised iterative inversion of a 2D travel time tomography problem in Cartesian co-ordinates.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_regularization_discussion.ipynb"
                        },
                        {
                          "name": "FMM Tomography - fmm_tomography_simple_newton.py",
                          "description": "Uses simple Newton matrix solver to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_simple_newton.py"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_rect_gauss_newton.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_gauss_newton.py"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_tri_gauss_newton.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_gauss_newton.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                          "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                        },
                        {
                          "name": "FMM Tomography - travel_time_tomography.ipynb",
                          "description": "Seismic wave tomography via fast marching method",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                        }
                      ],
                      "children": []
                    }
                  ]
                },
                {
                  "name": "scipy.optimize.least_squares",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Linear Regression - linear_regression_optimizer_lstsq.py",
                      "description": "Script demonstrating scipy misfit optimisation based solver for a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_lstsq.py"
                    },
                    {
                      "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
                      "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "trf",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_lstsq.py",
                      "link_doc": null,
                      "description": "Trust Region Reflective algorithm, particularly suitable for large sparse problems with bounds.",
                      "examples": [
                        {
                          "name": "Linear Regression - linear_regression_optimizer_lstsq.py",
                          "description": "Script demonstrating scipy misfit optimisation based solver for a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_lstsq.py"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "dogbox",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_lstsq.py",
                      "link_doc": null,
                      "description": "Dogleg algorithm with rectangular trust regions, typical use case is small problems with bounds.",
                      "children": []
                    },
                    {
                      "name": "lm",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_lstsq.py",
                      "link_doc": null,
                      "description": "Levenberg-Marquardt algorithm as implemented in MINPACK. Doesn\u2019t handle bounds and sparse Jacobians.",
                      "examples": [
                        {
                          "name": "Non-linear Curve Fitting - nonlinear_curve_fitting.ipynb",
                          "description": "We solve a synthetic non-linear curve fitting problem in a deterministic setting (using Levenberg-Marquardt) and a probabilistic setting (using the stretch move in an affine-invariant sampler)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/nonlinear_curve_fitting/nonlinear_curve_fitting.ipynb"
                        }
                      ],
                      "children": []
                    }
                  ]
                },
                {
                  "name": "torch.optim",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Linear Regression - linear_regression_pytorch_optim.py",
                      "description": "Script demonstrating pytorch misfit minimisation of a curve for a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_pytorch_optim.py"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_tri_torch_optim.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_torch_optim.py"
                    },
                    {
                      "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
                      "description": "DCIP inversion for a synthetic test problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
                    }
                  ],
                  "tutorials": [
                    {
                      "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                      "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "Adadelta",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.Adadelta.html#torch.optim.Adadelta\n",
                      "description": "ADADELTA, an Adaptive Learning Rate Method.",
                      "children": []
                    },
                    {
                      "name": "Adagrad",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.Adagrad.html#torch.optim.Adagrad\n",
                      "description": "Adaptive Subgradient Methods for Online Learning and Stochastic Optimization.",
                      "children": []
                    },
                    {
                      "name": "Adam",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.Adam.html#torch.optim.Adam\n",
                      "description": "Adam, a Method for Stochastic Optimization.",
                      "examples": [
                        {
                          "name": "Linear Regression - linear_regression_pytorch_optim.py",
                          "description": "Script demonstrating pytorch misfit minimisation of a curve for a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_pytorch_optim.py"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "AdamW",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html#torch.optim.AdamW\n",
                      "description": "Decoupled Weight Decay Regularization.",
                      "children": []
                    },
                    {
                      "name": "SparseAdam",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.SparseAdam.html#torch.optim.SparseAdam\n",
                      "description": "Lazy version of Adam algorithm suitable for sparse tensors.",
                      "children": []
                    },
                    {
                      "name": "Adamax",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.Adamax.html#torch.optim.Adamax\n",
                      "description": "Adamax algorithm (a variant of Adam based on infinity norm).",
                      "children": []
                    },
                    {
                      "name": "ASGD",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.ASGD.html#torch.optim.ASGD\n",
                      "description": "Averaged Stochastic Gradient Descent.",
                      "children": []
                    },
                    {
                      "name": "LBFGS",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.LBFGS.html#torch.optim.LBFGS\n",
                      "description": "L-BFGS algorithm, heavily inspired by minFunc.",
                      "examples": [
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_tri_torch_optim.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_torch_optim.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "PyGIMLi ERT - electrical_resistivity_tomography.ipynb",
                          "description": "Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/electrical_resistivity_tomography/electrical_resistivity_tomography.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "NAdam",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.NAdam.html#torch.optim.NAdam\n",
                      "description": "NAdam algorithm, incorporating Nesterov Momentum into Adam",
                      "children": []
                    },
                    {
                      "name": "RAdam",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.RAdam.html#torch.optim.RAdam\n",
                      "description": "RAdam algorithm, on the variance of the adaptive learning rate and beyond",
                      "examples": [
                        {
                          "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
                          "description": "DCIP inversion for a synthetic test problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "RMSprop",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.RMSprop.html#torch.optim.RMSprop\n",
                      "description": "RMSprop, a form of stochastic gradient descent where the gradients are divided by a running average of their recent magnitude",
                      "children": []
                    },
                    {
                      "name": "Rprop",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.Rprop.html#torch.optim.Rprop\n",
                      "description": "The resilient backpropagation algorithm.",
                      "children": []
                    },
                    {
                      "name": "SGD",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_pytorch_optim.py",
                      "link_doc": "https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD\n",
                      "description": "The stochastic gradient descent (optionally with momentum).",
                      "children": []
                    }
                  ]
                },
                {
                  "name": "scipy.optimize.minimize",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
                      "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
                    },
                    {
                      "name": "Linear Regression - linear_regression.ipynb",
                      "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                    },
                    {
                      "name": "Linear Regression - linear_regression_optimizer_minimize.py",
                      "description": "Script demonstrating scipy least squares based solver for a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_minimize.py"
                    },
                    {
                      "name": "FMM Tomography - fmm_tomography_gaussian_prior_scipy_opt.py",
                      "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a spatial Gaussian prior regularisation in a Cartesian 2D travel time tomography problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_gaussian_prior_scipy_opt.py"
                    },
                    {
                      "name": "FMM Tomography - fmm_tomography_reg_scipy_optimiser.py",
                      "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_reg_scipy_optimiser.py"
                    },
                    {
                      "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
                      "description": "DCIP inversion for a synthetic test problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
                    },
                    {
                      "name": "PyGIMLi DCIP - pygimli_dcip_century_tri_mesh.ipynb",
                      "description": "DCIP inversion for the Century Deposit",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip_century_tri_mesh.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                      "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                      "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert.ipynb",
                      "description": "Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert.ipynb"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_rect_scipy_min.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_scipy_min.py"
                    },
                    {
                      "name": "PyGIMLi ERT - pygimli_ert_tri_scipy_min.py",
                      "description": "Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_scipy_min.py"
                    }
                  ],
                  "tutorials": [
                    {
                      "name": "Linear Regression - linear_regression.ipynb",
                      "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                    },
                    {
                      "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
                      "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
                    },
                    {
                      "name": "FMM Tomography - travel_time_tomography.ipynb",
                      "description": "Seismic wave tomography via fast marching method",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                    },
                    {
                      "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                      "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "Nelder-Mead",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-neldermead.html#optimize-minimize-neldermead\n",
                      "description": "Uses the Simplex algorithm.",
                      "examples": [
                        {
                          "name": "Receiver Function Inversion - receiver_function_inversion.ipynb",
                          "description": "We invert a synthetic receiver function for the 1-D Vs structure using both optimization and sampling",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/receiver_function/receiver_function_inversion.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "Powell",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-powell.html#optimize-minimize-powell\n",
                      "description": "A modification of Powell\u2019s method which is a conjugate direction method.",
                      "children": []
                    },
                    {
                      "name": "CG",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-cg.html#optimize-minimize-cg\n",
                      "description": "Uses a nonlinear conjugate gradient algorithm by Polak and Ribiere, a variant of the Fletcher-Reeves method",
                      "children": []
                    },
                    {
                      "name": "BFGS",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-bfgs.html#optimize-minimize-bfgs\n",
                      "description": "Uses the quasi-Newton method of Broyden, Fletcher, Goldfarb, and Shanno (BFGS).",
                      "examples": [
                        {
                          "name": "Linear Regression - linear_regression.ipynb",
                          "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                        },
                        {
                          "name": "Linear Regression - linear_regression_optimizer_minimize.py",
                          "description": "Script demonstrating scipy least squares based solver for a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_optimizer_minimize.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "Linear Regression - linear_regression.ipynb",
                          "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "Newton-CG",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-newtoncg.html#optimize-minimize-newtoncg\n",
                      "description": "Uses a Newton-CG algorithm (also known as the truncated Newton method).",
                      "examples": [
                        {
                          "name": "FMM Tomography - fmm_tomography_gaussian_prior_scipy_opt.py",
                          "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a spatial Gaussian prior regularisation in a Cartesian 2D travel time tomography problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_gaussian_prior_scipy_opt.py"
                        },
                        {
                          "name": "FMM Tomography - fmm_tomography_reg_scipy_optimiser.py",
                          "description": "Uses scipy conjugate gradients to iteratively minimise a least squares travel time objective function with a smoothing, flattening or damping regularisation in a Cartesian 2D travel time tomography problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/fmm_tomography/fmm_tomography_reg_scipy_optimiser.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "VTEM max Thin plate inversion - thin_plate_inversion.ipynb",
                          "description": "Using the forward solver provided by P223 and CoFI to invert for a thin plate target",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/thin_plate_inversion/thin_plate_inversion.ipynb"
                        },
                        {
                          "name": "FMM Tomography - travel_time_tomography.ipynb",
                          "description": "Seismic wave tomography via fast marching method",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "L-BFGS-B",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html#optimize-minimize-lbfgsb\n",
                      "description": "Uses the L-BFGS-B algorithm for bound constrained minimization.",
                      "children": []
                    },
                    {
                      "name": "TNC",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-tnc.html#optimize-minimize-tnc\n",
                      "description": "Uses a truncated Newton algorithm to minimize a function with variables subject to bounds.",
                      "children": []
                    },
                    {
                      "name": "COBYLA",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-cobyla.html#optimize-minimize-cobyla\n",
                      "description": "Uses the Constrained Optimization BY Linear Approximation (COBYLA) method.",
                      "children": []
                    },
                    {
                      "name": "SLSQP",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-slsqp.html#optimize-minimize-slsqp\n",
                      "description": "Uses Sequential Least SQuares Programming to minimize a function of several variables with any combination of bounds, equality and inequality constraints.",
                      "children": []
                    },
                    {
                      "name": "trust-constr",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-trustconstr.html#optimize-minimize-trustconstr\n",
                      "description": "A trust-region algorithm for constrained optimization.",
                      "children": []
                    },
                    {
                      "name": "dogleg",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-dogleg.html#optimize-minimize-dogleg\n",
                      "description": "Uses the dog-leg trust-region algorithm for unconstrained minimization.",
                      "children": []
                    },
                    {
                      "name": "trust-ncg",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-trustncg.html#optimize-minimize-trustncg\n",
                      "description": "Uses the Newton conjugate gradient trust-region algorithm for unconstrained minimization.",
                      "examples": [
                        {
                          "name": "PyGIMLi DCIP - pygimli_dcip.ipynb",
                          "description": "DCIP inversion for a synthetic test problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip.ipynb"
                        },
                        {
                          "name": "PyGIMLi DCIP - pygimli_dcip_century_tri_mesh.ipynb",
                          "description": "DCIP inversion for the Century Deposit",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_dcip/pygimli_dcip_century_tri_mesh.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "trust-exact",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-trustexact.html#optimize-minimize-trustexact\n",
                      "description": "A trust-region method for unconstrained minimization in which quadratic subproblems are solved almost exactly.",
                      "examples": [
                        {
                          "name": "Surface wave dispersion and receiver function (joint inversion) - surface_wave_receiver_function_joint.ipynb",
                          "description": "We jointly invert receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb"
                        },
                        {
                          "name": "Surface wave dispersion and receiver function (joint inversion) - sw_rf_joint_synthetic.ipynb",
                          "description": "We jointly invert synthetic receiver-function and surface-wave velocity measurements for the 1-D Vs structure using different approaches (optimisation, fixed-dimensional sampling, and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_rf_joint/sw_rf_joint_synthetic.ipynb"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert.ipynb",
                          "description": "Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert.ipynb"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_rect_scipy_min.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_rect_scipy_min.py"
                        },
                        {
                          "name": "PyGIMLi ERT - pygimli_ert_tri_scipy_min.py",
                          "description": "Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/pygimli_ert/pygimli_ert_tri_scipy_min.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "Surface wave dispersion - 1D_rayleigh_wave_phase_velocity_inversion.ipynb",
                          "description": "We utlise CoFI to run optimsiation, fixed-dimensional sampling and trans-dimensional sampling on a surface wave dispersion curve inversion problem",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/rayleigh_wave_phase_velocity/1D_rayleigh_wave_phase_velocity_inversion.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "trust-krylov",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_opt_min.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/optimize.minimize-trustkrylov.html#optimize-minimize-trustkrylov\n",
                      "description": "Uses the Newton GLTR trust-region algorithm for unconstrained minimization.",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Matrix based solvers",
          "link_git": null,
          "link_doc": null,
          "description": "Matrix-based solvers are computational algorithms that solve systems of equations, which often arise in linear or iteratively linear parameter estimation problems.",
          "examples": [
            {
              "name": "Linear Regression - linear_regression.ipynb",
              "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression_sealevel.ipynb",
              "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
            },
            {
              "name": "Linear Regression - linear_regression_linear_system_solver.py",
              "description": "Script demonstrating (local) matrix based solver for a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_solver.py"
            },
            {
              "name": "Linear Regression - linear_regression_linear_system_general.py",
              "description": "Script demonstrating scipy Least Squares matrix based solver for a simple polynomial regression problem.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_general.py"
            },
            {
              "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
              "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
            },
            {
              "name": "Xray Tomography - xray_tomography.ipynb",
              "description": "Solves overdetermined linear system with Least Squares using scipy for 2D Xray tomography problem in Cartesian co-ordinates.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography.ipynb"
            },
            {
              "name": "Xray Tomography - xray_tomography_linear_solver.py",
              "description": "Script for solving overdetermined linear system for 2D Xray tomography problem in Cartesian co-ordinates.",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography_linear_solver.py"
            }
          ],
          "tutorials": [
            {
              "name": "Linear Regression - linear_regression.ipynb",
              "description": "Linear regression problem solved by linear solver, optimizer and sampler",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
            },
            {
              "name": "FMM Tomography - travel_time_tomography.ipynb",
              "description": "Seismic wave tomography via fast marching method",
              "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
            }
          ],
          "children": [
            {
              "name": "Linear system solvers",
              "link_git": null,
              "link_doc": null,
              "description": "Linear system solvers are algorithms designed to find the values of unknowns in a set of linear equations.",
              "examples": [
                {
                  "name": "Linear Regression - linear_regression.ipynb",
                  "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression_sealevel.ipynb",
                  "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
                },
                {
                  "name": "Linear Regression - linear_regression_linear_system_solver.py",
                  "description": "Script demonstrating (local) matrix based solver for a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_solver.py"
                },
                {
                  "name": "Linear Regression - linear_regression_linear_system_general.py",
                  "description": "Script demonstrating scipy Least Squares matrix based solver for a simple polynomial regression problem.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_general.py"
                },
                {
                  "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
                  "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
                },
                {
                  "name": "Xray Tomography - xray_tomography.ipynb",
                  "description": "Solves overdetermined linear system with Least Squares using scipy for 2D Xray tomography problem in Cartesian co-ordinates.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography.ipynb"
                },
                {
                  "name": "Xray Tomography - xray_tomography_linear_solver.py",
                  "description": "Script for solving overdetermined linear system for 2D Xray tomography problem in Cartesian co-ordinates.",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography_linear_solver.py"
                }
              ],
              "tutorials": [
                {
                  "name": "Linear Regression - linear_regression.ipynb",
                  "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                },
                {
                  "name": "FMM Tomography - travel_time_tomography.ipynb",
                  "description": "Seismic wave tomography via fast marching method",
                  "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                }
              ],
              "children": [
                {
                  "name": "scipy.linalg.lstsq",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "examples": [
                    {
                      "name": "Linear Regression - linear_regression.ipynb",
                      "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                    },
                    {
                      "name": "Linear Regression - linear_regression_sealevel.ipynb",
                      "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
                    },
                    {
                      "name": "Linear Regression - linear_regression_linear_system_solver.py",
                      "description": "Script demonstrating (local) matrix based solver for a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_solver.py"
                    },
                    {
                      "name": "Linear Regression - linear_regression_linear_system_general.py",
                      "description": "Script demonstrating scipy Least Squares matrix based solver for a simple polynomial regression problem.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_general.py"
                    },
                    {
                      "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
                      "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
                    },
                    {
                      "name": "Xray Tomography - xray_tomography.ipynb",
                      "description": "Solves overdetermined linear system with Least Squares using scipy for 2D Xray tomography problem in Cartesian co-ordinates.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography.ipynb"
                    },
                    {
                      "name": "Xray Tomography - xray_tomography_linear_solver.py",
                      "description": "Script for solving overdetermined linear system for 2D Xray tomography problem in Cartesian co-ordinates.",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography_linear_solver.py"
                    }
                  ],
                  "tutorials": [
                    {
                      "name": "Linear Regression - linear_regression.ipynb",
                      "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                    },
                    {
                      "name": "FMM Tomography - travel_time_tomography.ipynb",
                      "description": "Seismic wave tomography via fast marching method",
                      "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                    }
                  ],
                  "children": [
                    {
                      "name": "gelsd",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_lstsq.py",
                      "link_doc": null,
                      "description": "Solve linear least squares using divide-and-conquer SVD.",
                      "examples": [
                        {
                          "name": "Linear Regression - linear_regression.ipynb",
                          "description": "Demonstrates polynomial curve fitting with matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression.ipynb"
                        },
                        {
                          "name": "Linear Regression - linear_regression_sealevel.ipynb",
                          "description": "Demonstrates polynomial curve fitting of a real Sea level dataset using a matrix based linear solver, scipy optimisation of a misfit, and Bayesian sampling of a posterior PDF, with user challenges.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_sealevel.ipynb"
                        },
                        {
                          "name": "Linear Regression - linear_regression_linear_system_solver.py",
                          "description": "Script demonstrating (local) matrix based solver for a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_solver.py"
                        },
                        {
                          "name": "Linear Regression - linear_regression_linear_system_general.py",
                          "description": "Script demonstrating scipy Least Squares matrix based solver for a simple polynomial regression problem.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/linear_regression/linear_regression_linear_system_general.py"
                        },
                        {
                          "name": "Surface Wave Tomography via Seislib - sw_tomography.ipynb",
                          "description": "We map surface-wave velocity across the continental USA by solving a 2-D tomography problem through different approaches (regularised least-squares and trans-dimensional sampling)",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/sw_tomography/sw_tomography.ipynb"
                        },
                        {
                          "name": "Xray Tomography - xray_tomography.ipynb",
                          "description": "Solves overdetermined linear system with Least Squares using scipy for 2D Xray tomography problem in Cartesian co-ordinates.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography.ipynb"
                        },
                        {
                          "name": "Xray Tomography - xray_tomography_linear_solver.py",
                          "description": "Script for solving overdetermined linear system for 2D Xray tomography problem in Cartesian co-ordinates.",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/examples/xray_tomography/xray_tomography_linear_solver.py"
                        }
                      ],
                      "tutorials": [
                        {
                          "name": "Linear Regression - linear_regression.ipynb",
                          "description": "Linear regression problem solved by linear solver, optimizer and sampler",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/linear_regression/linear_regression.ipynb"
                        },
                        {
                          "name": "FMM Tomography - travel_time_tomography.ipynb",
                          "description": "Seismic wave tomography via fast marching method",
                          "linkToGit": "https://github.com/inlab-geo/cofi-examples/tree/main/tutorials/travel_time_tomography/travel_time_tomography.ipynb"
                        }
                      ],
                      "children": []
                    },
                    {
                      "name": "gelsy",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_lstsq.py",
                      "link_doc": null,
                      "description": "Solve linear least squares using complete orthogonal factorization.",
                      "children": []
                    },
                    {
                      "name": "gelss",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_lstsq.py",
                      "link_doc": null,
                      "description": "Solve linear least squares using SVD.",
                      "children": []
                    }
                  ]
                },
                {
                  "name": "scipy.sparse.linalg",
                  "link_git": null,
                  "link_doc": null,
                  "description": null,
                  "children": [
                    {
                      "name": "spsolve",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.spsolve.html\n",
                      "description": "Direct method that solves the sparse linear system Ax=b, where b may be a vector or a matrix",
                      "children": []
                    },
                    {
                      "name": "spsolve_triangular",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.spsolve_triangular.html\n",
                      "description": "Direct method that solves the sparse linear system Ax=b, assuming A is a triangular matrix.",
                      "children": []
                    },
                    {
                      "name": "bicg",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.bicg.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the BIConjugate Gradient method",
                      "children": []
                    },
                    {
                      "name": "bicgstab",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.bicgstab.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the BIConjugate Gradient STABilized method",
                      "children": []
                    },
                    {
                      "name": "cg",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.cg.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the Conjugate Gradient method",
                      "children": []
                    },
                    {
                      "name": "cgs",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.cgs.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the Conjugate Gradient Squared method",
                      "children": []
                    },
                    {
                      "name": "gmres",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.gmres.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the Generalized Minimal RESidual method",
                      "children": []
                    },
                    {
                      "name": "lgmres",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lgmres.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the LGMRES algorithm",
                      "children": []
                    },
                    {
                      "name": "minres",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.minres.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the MINimum RESidual method",
                      "children": []
                    },
                    {
                      "name": "qmr",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.qmr.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the Quasi-Minimal Residual method",
                      "children": []
                    },
                    {
                      "name": "qcrotmk",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.qcrotmk.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the flexible GCROT(m,k) algorithm",
                      "children": []
                    },
                    {
                      "name": "tfqmr",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.tfqmr.html\n",
                      "description": "Iterative method that solves the sparse linear system Ax=b using the Transpose-Free Quasi-Minimal Residual method",
                      "children": []
                    },
                    {
                      "name": "lsqr",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsqr.html\n",
                      "description": "Iterative method that finds the least-squares solution to a large, sparse, linear system of equations",
                      "children": []
                    },
                    {
                      "name": "lsmr",
                      "link_git": "https://github.com/inlab-geo/cofi/blob/main/src/cofi/tools/_scipy_sparse_lstsq.py",
                      "link_doc": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html\n",
                      "description": "Iterative method that solves sparse least-squares problems",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}